import React from 'react'

function App() {
  return (
    <div style={{ 
      padding: '20px', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', 
      color: 'white', 
      minHeight: '100vh',
      fontFamily: 'system-ui, -apple-system, sans-serif'
    }}>
      <div style={{
        maxWidth: '800px',
        margin: '0 auto',
        textAlign: 'center'
      }}>
        <h1 style={{ fontSize: '2.5rem', marginBottom: '1rem' }}>ðŸŽ¯ Influencer Deal Calculator</h1>
        <p style={{ fontSize: '1.2rem', opacity: 0.9 }}>Phase 3: Local Data Persistence - Testing React Setup</p>
        <div style={{
          background: 'rgba(255,255,255,0.1)',
          padding: '2rem',
          borderRadius: '12px',
          marginTop: '2rem',
          backdropFilter: 'blur(10px)'
        }}>
          <h2>âœ… React is Working!</h2>
          <p>The basic React setup is functioning correctly.</p>
          <p>Ready to restore the full calculator functionality.</p>
        </div>
      </div>
    </div>
  )
}

export default App

  // Profile management functions
  const handleProfileSelect = useCallback((profile) => {
    setSelectedProfile(profile)
    setProfileName(profile.name)
    setPromoCode(profile.promocode || '')
    
    // Load profile's custom weights if they exist
    if (profile.customWeights) {
      setCustomWeights(profile.customWeights)
    }
    if (profile.globalWeights) {
      setGlobalVideoWeight(profile.globalWeights.video)
      setGlobalStoryWeight(profile.globalWeights.story)
    }
  }, [setCustomWeights, setGlobalVideoWeight, setGlobalStoryWeight])

  const handleSaveProfile = useCallback(() => {
    try {
      const profileData = {
        id: selectedProfile?.id,
        name: profileName.trim(),
        promocode: promoCode.trim(),
        customWeights: { ...customWeights },
        globalWeights: {
          video: globalVideoWeight,
          story: globalStoryWeight
        },
        isAdvancedMode
      }

      if (!profileData.name) {
        alert('Please enter a profile name')
        return
      }

      const savedProfile = profileStorage.save(profileData)
      setSelectedProfile(savedProfile)
      
      // Refresh the profiles list
      const profiles = profileStorage.getAll()
      setAvailableProfiles(profiles)
      setFilteredProfiles(profiles)
      
      alert('Profile saved successfully!')
    } catch (error) {
      alert('Failed to save profile: ' + error.message)
    }
  }, [selectedProfile, profileName, promoCode, customWeights, globalVideoWeight, globalStoryWeight, isAdvancedMode])

  const handleDeleteProfile = useCallback((profileId) => {
    if (confirm('Are you sure you want to delete this profile and all its deal history?')) {
      profileStorage.delete(profileId)
      
      // Refresh the profiles list
      const profiles = profileStorage.getAll()
      setAvailableProfiles(profiles)
      setFilteredProfiles(profiles)
      
      // Clear selection if deleted profile was selected
      if (selectedProfile?.id === profileId) {
        setSelectedProfile(null)
        setProfileName('')
        setPromoCode('')
      }
    }
  }, [selectedProfile])

  const handleSaveDeal = useCallback(() => {
    if (!selectedProfile || !calculations) return

    try {
      const dealEntry = {
        profileId: selectedProfile.id,
        profileName: selectedProfile.name,
        totalPrice: parseFloat(totalPrice),
        totalViews: parseFloat(totalViews),
        videoCount,
        storyCount,
        selectedPlatforms: { ...selectedPlatforms },
        breakdown: calculations.breakdown,
        isAdvancedMode,
        customWeights: isAdvancedMode ? { ...customWeights } : null,
        globalWeights: isAdvancedMode ? {
          video: globalVideoWeight,
          story: globalStoryWeight
        } : null
      }

      dealHistoryStorage.save(dealEntry)
      
      // Refresh deal history
      const history = dealHistoryStorage.getByProfileId(selectedProfile.id)
      setDealHistory(history)
      
      alert('Deal saved to history!')
    } catch (error) {
      alert('Failed to save deal: ' + error.message)
    }
  }, [selectedProfile, calculations, totalPrice, totalViews, videoCount, storyCount, selectedPlatforms, isAdvancedMode, customWeights, globalVideoWeight, globalStoryWeight])

  // Calculation logic
  const calculations = useMemo(() => {
    const price = parseFloat(totalPrice) || 0
    const views = parseFloat(totalViews) || 0
    
    if (price === 0 || views === 0) return null
    
    let totalVideos = 0
    let totalStories = 0
    
    Object.entries(selectedPlatforms).forEach(([platform, isSelected]) => {
      if (isSelected) {
        totalVideos += videoCount
        if (platform === 'facebook' || platform === 'instagram') {
          totalStories += storyCount
        }
      }
    })
    
    if (totalVideos === 0 && totalStories === 0) return null
    
    // Use advanced weights if in advanced mode, otherwise use default weights
    const videoWeight = isAdvancedMode ? globalVideoWeight : 6
    const storyWeight = isAdvancedMode ? globalStoryWeight : 1
    
    const totalVideoUnits = totalVideos * videoWeight
    const totalStoryUnits = totalStories * storyWeight
    const totalUnits = totalVideoUnits + totalStoryUnits
    
    const videoPricePool = totalVideoUnits > 0 ? (price * totalVideoUnits) / totalUnits : 0
    const storyPricePool = totalStoryUnits > 0 ? (price * totalStoryUnits) / totalUnits : 0
    
    const videoViewsPool = totalVideoUnits > 0 ? (views * totalVideoUnits) / totalUnits : 0
    const storyViewsPool = totalStoryUnits > 0 ? (views * totalStoryUnits) / totalUnits : 0
    
    const pricePerVideo = totalVideos > 0 ? videoPricePool / totalVideos : 0
    const pricePerStory = totalStories > 0 ? storyPricePool / totalStories : 0
    
    const viewsPerVideo = totalVideos > 0 ? videoViewsPool / totalVideos : 0
    const viewsPerStory = totalStories > 0 ? storyViewsPool / totalStories : 0
    
    const breakdown = {}
    Object.entries(selectedPlatforms).forEach(([platform, isSelected]) => {
      if (isSelected) {
        // In advanced mode, use platform-specific weights for more granular control
        const platformVideoWeight = isAdvancedMode ? customWeights[platform].video : videoWeight
        const platformStoryWeight = isAdvancedMode ? customWeights[platform].story : storyWeight
        
        const videoData = {
          count: videoCount,
          priceEach: videoCount > 0 ? pricePerVideo : 0,
          viewsEach: videoCount > 0 ? viewsPerVideo : 0,
          totalPrice: videoCount * pricePerVideo,
          totalViews: videoCount * viewsPerVideo,
          weight: platformVideoWeight
        }
        const hasStories = platform === 'facebook' || platform === 'instagram'
        const storyData = {
          count: hasStories ? storyCount : 0,
          priceEach: hasStories && storyCount > 0 ? pricePerStory : 0,
          viewsEach: hasStories && storyCount > 0 ? viewsPerStory : 0,
          totalPrice: hasStories ? storyCount * pricePerStory : 0,
          totalViews: hasStories ? storyCount * viewsPerStory : 0,
          weight: platformStoryWeight
        }
        breakdown[platform] = {
          video: videoData,
          story: storyData
        }
      }
    })
    
    return { breakdown, pricePerVideo, pricePerStory, viewsPerVideo, viewsPerStory, videoWeight, storyWeight }
  }, [totalPrice, totalViews, videoCount, storyCount, selectedPlatforms, isAdvancedMode, globalVideoWeight, globalStoryWeight, customWeights])

  const handlePlatformToggle = useCallback((platform) => {
    setSelectedPlatforms(prev => ({
      ...prev,
      [platform]: !prev[platform]
    }))
  }, [])

  const copyToClipboard = useCallback(async (value) => {
    try {
      // Remove commas, dollar signs, and other formatting
      const cleanValue = value.toString().replace(/[,$]/g, '')
      await navigator.clipboard.writeText(cleanValue)
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }, [])

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900">
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-2xl mb-6">
            <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
            </svg>
          </div>
          <h1 className="text-5xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent mb-4">
            Influencer Deal Calculator
          </h1>
          <p className="text-xl text-gray-400 max-w-2xl mx-auto leading-relaxed">
            Calculate itemized pricing for influencer deals across platforms with precision and clarity
          </p>
          
          {/* Mode Toggle */}
          <div className="mt-8 flex justify-center">
            <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-2xl p-2">
              <button
                onClick={() => setIsAdvancedMode(!isAdvancedMode)}
                className={`px-8 py-4 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105 ${
                  isAdvancedMode 
                    ? 'bg-gradient-to-r from-indigo-500 to-purple-600 text-white shadow-xl shadow-indigo-500/25' 
                    : 'bg-gray-700/50 text-gray-300 hover:bg-gray-600/50'
                }`}
              >
                <span className="flex items-center gap-2">
                  {isAdvancedMode ? (
                    <>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                      </svg>
                      Advanced Mode
                    </>
                  ) : (
                    <>
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                      </svg>
                      Simple Mode
                    </>
                  )}
                  <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </span>
              </button>
            </div>
          </div>
        </div>
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="space-y-6">
            {/* Deal Information Card */}
            <div className="bg-gradient-to-br from-gray-800/80 to-gray-900/80 backdrop-blur-sm border border-gray-700/50 rounded-2xl p-8 shadow-2xl hover:shadow-indigo-500/10 transition-all duration-300">
              <div className="flex items-center mb-8">
                <div className="w-1 h-12 bg-gradient-to-b from-indigo-400 to-indigo-600 rounded-full mr-5"></div>
                <div>
                  <h2 className="text-2xl font-bold text-white mb-1">
                    Deal Information
                  </h2>
                  <p className="text-sm text-gray-400">Enter your deal parameters</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="space-y-3">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Total Deal Price
                  </label>
                  <div className="relative group">
                    <span className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 text-lg font-medium">$</span>
                    <input
                      type="number"
                      value={totalPrice}
                      onChange={(e) => setTotalPrice(e.target.value)}
                      className="w-full pl-10 pr-4 py-4 bg-gray-700/50 border border-gray-600/50 rounded-xl text-white text-lg placeholder-gray-500 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 focus:bg-gray-700/70 transition-all duration-200 group-hover:border-gray-500/70"
                      placeholder="6000"
                    />
                  </div>
                </div>
                
                <div className="space-y-3">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Total Expected Views
                  </label>
                  <div className="relative group">
                    <input
                      type="number"
                      value={totalViews}
                      onChange={(e) => setTotalViews(e.target.value)}
                      className="w-full px-4 py-4 bg-gray-700/50 border border-gray-600/50 rounded-xl text-white text-lg placeholder-gray-500 focus:ring-2 focus:ring-indigo-400 focus:border-indigo-400 focus:bg-gray-700/70 transition-all duration-200 group-hover:border-gray-500/70"
                      placeholder="2000000"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* Content Details Card */}
            <div className="bg-gradient-to-br from-green-900/20 to-gray-900/80 backdrop-blur-sm border border-green-700/30 rounded-2xl p-8 shadow-2xl hover:shadow-green-500/10 transition-all duration-300">
              <div className="flex items-center mb-8">
                <div className="w-1 h-12 bg-gradient-to-b from-green-400 to-green-600 rounded-full mr-5"></div>
                <div>
                  <h2 className="text-2xl font-bold text-white mb-1">
                    Content Details
                  </h2>
                  <p className="text-sm text-gray-400">Specify content quantities</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                <div className="space-y-3">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Number of Videos
                  </label>
                  <div className="relative group">
                    <input
                      type="number"
                      min="0"
                      value={videoCount}
                      onChange={(e) => setVideoCount(Math.max(0, parseInt(e.target.value) || 0))}
                      className="w-full px-4 py-4 bg-gray-700/50 border border-gray-600/50 rounded-xl text-white text-lg placeholder-gray-500 focus:ring-2 focus:ring-green-400 focus:border-green-400 focus:bg-gray-700/70 transition-all duration-200 group-hover:border-gray-500/70"
                      placeholder="5"
                    />
                  </div>
                  <div className="flex items-center mt-3 px-3 py-2 bg-gray-800/30 rounded-lg">
                    <svg className="w-4 h-4 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p className="text-xs text-gray-400">
                      Applied to all selected platforms
                    </p>
                  </div>
                </div>
                <div className="space-y-3">
                  <label className="block text-sm font-semibold text-gray-300 mb-3">
                    Number of Stories
                  </label>
                  <div className="relative group">
                    <input
                      type="number"
                      min="0"
                      value={storyCount}
                      onChange={(e) => setStoryCount(Math.max(0, parseInt(e.target.value) || 0))}
                      className="w-full px-4 py-4 bg-gray-700/50 border border-gray-600/50 rounded-xl text-white text-lg placeholder-gray-500 focus:ring-2 focus:ring-green-400 focus:border-green-400 focus:bg-gray-700/70 transition-all duration-200 group-hover:border-gray-500/70"
                      placeholder="10"
                    />
                  </div>
                  <div className="flex items-center mt-3 px-3 py-2 bg-gray-800/30 rounded-lg">
                    <svg className="w-4 h-4 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p className="text-xs text-gray-400">
                      Only for Facebook & Instagram
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Platform Selection Card */}
            <div className="bg-gradient-to-br from-blue-900/20 to-gray-900/80 backdrop-blur-sm border border-blue-700/30 rounded-2xl p-8 shadow-2xl hover:shadow-blue-500/10 transition-all duration-300">
              <div className="flex items-center mb-8">
                <div className="w-1 h-12 bg-gradient-to-b from-blue-400 to-blue-600 rounded-full mr-5"></div>
                <div>
                  <h2 className="text-2xl font-bold text-white mb-1">
                    Select Platforms
                  </h2>
                  <p className="text-sm text-gray-400">Choose your target platforms</p>
                </div>
              </div>
              
              <div className="grid grid-cols-1 gap-4">
                {Object.entries(DEFAULT_WEIGHTS).map(([platform, weights]) => {
                  const platformColors = {
                    youtube: 'from-red-500 to-red-600',
                    instagram: 'from-pink-500 to-purple-600', 
                    tiktok: 'from-gray-800 to-gray-900',
                    twitter: 'from-blue-400 to-blue-500',
                    facebook: 'from-blue-600 to-blue-700'
                  }
                  const platformIcons = {
                    youtube: 'M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z',
                    instagram: 'M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z',
                    tiktok: 'M19.59 6.69a4.83 4.83 0 0 1-3.77-4.25V2h-3.45v13.67a2.89 2.89 0 0 1-5.2 1.74 2.89 2.89 0 0 1 2.31-4.64 2.93 2.93 0 0 1 .88.13V9.4a6.84 6.84 0 0 0-1-.05A6.33 6.33 0 0 0 5 20.1a6.34 6.34 0 0 0 10.86-4.43v-7a8.16 8.16 0 0 0 4.77 1.52v-3.4a4.85 4.85 0 0 1-1-.1z',
                    twitter: 'M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z',
                    facebook: 'M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z'
                  }
                  return (
                    <div key={platform} className={`group relative overflow-hidden rounded-xl border border-gray-600/50 hover:border-blue-400/50 transition-all duration-300 ${
                      selectedPlatforms[platform] ? 'bg-gradient-to-r ' + platformColors[platform] + '/10 border-blue-400/50' : 'bg-gray-800/30 hover:bg-gray-700/50'
                    }`}>
                      <div className="flex items-center p-6">
                        <div className="relative">
                          <input
                            type="checkbox"
                            id={platform}
                            checked={selectedPlatforms[platform]}
                            onChange={() => handlePlatformToggle(platform)}
                            className="sr-only"
                          />
                          <label htmlFor={platform} className="flex items-center cursor-pointer">
                            <div className={`w-6 h-6 rounded-lg border-2 mr-4 flex items-center justify-center transition-all duration-200 ${
                              selectedPlatforms[platform] 
                                ? 'bg-blue-500 border-blue-500' 
                                : 'border-gray-500 group-hover:border-blue-400'
                            }`}>
                              {selectedPlatforms[platform] && (
                                <svg className="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                              )}
                            </div>
                            <div className={`w-10 h-10 rounded-xl mr-4 flex items-center justify-center bg-gradient-to-r ${platformColors[platform]}`}>
                              <svg className="w-6 h-6 text-white" viewBox="0 0 24 24" fill="currentColor">
                                <path d={platformIcons[platform]} />
                              </svg>
                            </div>
                            <div className="flex-1">
                              <h3 className="text-white font-bold capitalize text-lg group-hover:text-blue-300 transition-colors">
                                {platform}
                              </h3>
                              <p className="text-sm text-gray-400 mt-1">
                                Video: {weights.video}{weights.story > 0 ? ` â€¢ Story: ${weights.story}` : ''}
                              </p>
                            </div>
                          </label>
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>
          </div>

          {/* Output Section */}
          <div className="bg-gradient-to-br from-yellow-900/20 to-gray-900/80 backdrop-blur-sm border border-yellow-700/30 rounded-2xl p-8 shadow-2xl hover:shadow-yellow-500/10 transition-all duration-300">
            <div className="flex items-center mb-8">
              <div className="w-1 h-12 bg-gradient-to-b from-yellow-400 to-yellow-600 rounded-full mr-5"></div>
              <div>
                <h2 className="text-2xl font-bold text-white mb-1">
                  Calculated Breakdown
                </h2>
                <p className="text-sm text-gray-400">Your deal pricing analysis</p>
              </div>
            </div>
            
            {calculations ? (
              <div className="space-y-6">
                {Object.entries(calculations.breakdown).map(([platform, data]) => (
                  <div key={platform} className="bg-gray-700 border border-gray-600 rounded-lg p-5 hover:border-yellow-500 transition-colors">
                    <div className="flex items-center mb-4">
                      <div className="w-3 h-3 bg-yellow-500 rounded-full mr-3"></div>
                      <h3 className="text-lg font-bold text-white capitalize">{platform}</h3>
                    </div>
                    
                    <div className="space-y-4">
                      {data.video.count > 0 && (
                        <div className="bg-gray-800 border border-gray-600 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center">
                              <div className="w-2 h-2 bg-purple-500 rounded-full mr-2"></div>
                              <span className="text-white font-semibold">
                                {data.video.count} Video{data.video.count !== 1 ? 's' : ''}
                              </span>
                            </div>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                              <div>
                                <span className="text-gray-400 text-sm">Price per post</span>
                                <div className="text-green-400 font-bold text-lg">
                                  ${data.video.priceEach.toFixed(0)}
                                </div>
                              </div>
                              <button
                                onClick={() => copyToClipboard(data.video.priceEach.toFixed(0))}
                                className="p-2 text-gray-400 hover:text-green-400 hover:bg-gray-600 rounded-lg transition-colors"
                                title="Copy price"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                              </button>
                            </div>
                            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                              <div>
                                <span className="text-gray-400 text-sm">Views per post</span>
                                <div className="text-blue-400 font-bold text-lg">
                                  {Math.round(data.video.viewsEach).toLocaleString()}
                                </div>
                              </div>
                              <button
                                onClick={() => copyToClipboard(Math.round(data.video.viewsEach))}
                                className="p-2 text-gray-400 hover:text-blue-400 hover:bg-gray-600 rounded-lg transition-colors"
                                title="Copy views"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {data.story.count > 0 && (
                        <div className="bg-gray-800 border border-gray-600 rounded-lg p-4">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center">
                              <div className="w-2 h-2 bg-pink-500 rounded-full mr-2"></div>
                              <span className="text-white font-semibold">
                                {data.story.count} Stor{data.story.count !== 1 ? 'ies' : 'y'}
                              </span>
                            </div>
                          </div>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                              <div>
                                <span className="text-gray-400 text-sm">Price per post</span>
                                <div className="text-green-400 font-bold text-lg">
                                  ${data.story.priceEach.toFixed(0)}
                                </div>
                              </div>
                              <button
                                onClick={() => copyToClipboard(data.story.priceEach.toFixed(0))}
                                className="p-2 text-gray-400 hover:text-green-400 hover:bg-gray-600 rounded-lg transition-colors"
                                title="Copy price"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                              </button>
                            </div>
                            <div className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                              <div>
                                <span className="text-gray-400 text-sm">Views per post</span>
                                <div className="text-blue-400 font-bold text-lg">
                                  {Math.round(data.story.viewsEach).toLocaleString()}
                                </div>
                              </div>
                              <button
                                onClick={() => copyToClipboard(Math.round(data.story.viewsEach))}
                                className="p-2 text-gray-400 hover:text-blue-400 hover:bg-gray-600 rounded-lg transition-colors"
                                title="Copy views"
                              >
                                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                                </svg>
                              </button>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                    
                    <div className="mt-4 pt-4 border-t border-gray-600">
                      <div className="flex justify-between items-center">
                        <span className="text-gray-300 font-semibold">Platform Total:</span>
                        <div className="flex items-center">
                          <span className="text-green-400 font-bold text-lg mr-2">
                            ${(data.video.totalPrice + data.story.totalPrice).toFixed(2)}
                          </span>
                          <button
                            onClick={() => copyToClipboard((data.video.totalPrice + data.story.totalPrice).toFixed(2))}
                            className="p-2 text-gray-400 hover:text-green-400 hover:bg-gray-600 rounded-lg transition-colors"
                            title="Copy platform total"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                            </svg>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                
                <div className="bg-gradient-to-r from-indigo-600 to-purple-600 border border-indigo-500 rounded-lg p-6 shadow-lg">
                  <div className="flex justify-between items-center">
                    <div>
                      <span className="text-indigo-100 text-sm font-medium">Grand Total</span>
                      <div className="text-white text-2xl font-bold">
                        ${totalPrice ? parseFloat(totalPrice).toFixed(2) : '0.00'}
                      </div>
                    </div>
                    <button
                      onClick={() => copyToClipboard(totalPrice || '0')}
                      className="p-3 text-indigo-200 hover:text-white hover:bg-indigo-500 rounded-lg transition-colors"
                      title="Copy grand total"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-12">
                <div className="w-16 h-16 bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4">
                  <svg className="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                </div>
                <p className="text-gray-400 text-lg font-medium">Ready to Calculate</p>
                <p className="text-gray-500 text-sm mt-2">Enter deal information and select platforms to see the breakdown</p>
              </div>
            )}
          </div>
        </div>
        
        {/* Help Section */}
        <div className="bg-gray-800 border border-gray-700 rounded-xl p-6 shadow-lg">
          <button
            onClick={() => setIsHelpExpanded(!isHelpExpanded)}
            className="w-full flex items-center justify-between text-left focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-lg p-2 -m-2 transition-colors hover:bg-gray-700"
          >
            <div className="flex items-center">
              <div className="w-2 h-8 bg-blue-500 rounded-full mr-4"></div>
              <h2 className="text-xl font-bold text-white">Help & Guide</h2>
            </div>
            <svg
              className={`w-6 h-6 text-gray-400 transition-transform duration-200 ${isHelpExpanded ? 'rotate-180' : ''}`}
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          
          {isHelpExpanded && (
            <div className="mt-6 space-y-6 text-gray-300">
              <div>
                <h3 className="text-lg font-semibold text-white mb-3">How to Use This Calculator</h3>
                <div className="space-y-3 text-sm leading-relaxed">
                  <p><strong className="text-blue-400">1. Enter Deal Information:</strong> Input the total price you'll receive and expected total views across all platforms.</p>
                  <p><strong className="text-blue-400">2. Set Content Counts:</strong> Specify how many videos and stories you'll create (these numbers apply to each selected platform).</p>
                  <p><strong className="text-blue-400">3. Select Platforms:</strong> Choose which social media platforms you'll post on. Stories are only available for Instagram and Facebook.</p>
                  <p><strong className="text-blue-400">4. Review Results:</strong> See the breakdown of price and views per post on each platform. Click any number to copy it.</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold text-white mb-3">Understanding Weights (Advanced Mode)</h3>
                <div className="space-y-3 text-sm leading-relaxed">
                  <p><strong className="text-orange-400">What are weights?</strong> Weights determine how much value each type of content gets. Higher weights mean more money and views allocated to that content type.</p>
                  <p><strong className="text-orange-400">Global Weights:</strong> Set the base importance of videos vs stories across all platforms. Videos typically have higher weights because they require more effort and get better engagement.</p>
                  <p><strong className="text-orange-400">Platform Weights:</strong> Fine-tune the value for each platform individually. For example, YouTube videos might be worth more than TikTok videos due to longer content and different audience engagement.</p>
                  <p><strong className="text-orange-400">Default Values:</strong> The calculator starts with industry-standard weights, but you can adjust them based on your specific audience and content strategy.</p>
                </div>
              </div>
              
              <div>
                <h3 className="text-lg font-semibold text-white mb-3">Advanced Features</h3>
                <div className="space-y-3 text-sm leading-relaxed">
                  <p><strong className="text-purple-400">Influencer Profiles:</strong> Save your custom weight settings and deal preferences for quick reuse in future calculations.</p>
                  <p><strong className="text-purple-400">Custom Weighting:</strong> Adjust how the calculator distributes money and views between different content types and platforms based on your experience and audience.</p>
                  <p><strong className="text-purple-400">Promo Codes:</strong> Track special discount codes or campaign identifiers for your deals.</p>
                </div>
              </div>
              
              <div className="bg-gray-700 rounded-lg p-4">
                <h4 className="text-white font-medium mb-2">ðŸ’¡ Pro Tips</h4>
                <ul className="space-y-1 text-sm text-gray-300">
                  <li>â€¢ Start with Simple Mode to get familiar with the basics</li>
                  <li>â€¢ Use Advanced Mode when you want more control over pricing</li>
                  <li>â€¢ Higher weights = more money allocated to that content type</li>
                  <li>â€¢ Stories typically have lower weights than videos</li>
                  <li>â€¢ Save profiles for deals you do regularly</li>
                </ul>
              </div>
            </div>
          )}
        </div>
        
        {/* Advanced Mode Features */}
        {isAdvancedMode && (
          <div className="mt-8 space-y-8">
            {/* Influencer Profile Section */}
            <div className="bg-gray-800 border border-gray-700 rounded-xl p-6 shadow-lg">
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center">
                  <div className="w-2 h-8 bg-purple-500 rounded-full mr-4"></div>
                  <h2 className="text-xl font-bold text-white">
                    Influencer Profile
                  </h2>
                </div>
                {selectedProfile && (
                  <div className="flex items-center gap-2">
                    <span className="text-sm text-green-400">âœ“ {selectedProfile.name}</span>
                    <button
                      onClick={() => setShowDealHistory(!showDealHistory)}
                      className="px-3 py-1 bg-purple-600 hover:bg-purple-500 text-white text-sm rounded-lg transition-colors"
                    >
                      {showDealHistory ? 'Hide History' : 'Show History'}
                    </button>
                  </div>
                )}
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Search or Create Profile
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      value={profileSearch}
                      onChange={(e) => setProfileSearch(e.target.value)}
                      className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                      placeholder="Search existing profiles..."
                    />
                    <svg className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                  
                  {/* Profile Search Results */}
                  {profileSearch && filteredProfiles.length > 0 && (
                    <div className="mt-2 bg-gray-700 border border-gray-600 rounded-lg max-h-40 overflow-y-auto">
                      {filteredProfiles.map((profile) => (
                        <div
                          key={profile.id}
                          className="flex items-center justify-between p-3 hover:bg-gray-600 cursor-pointer border-b border-gray-600 last:border-b-0"
                          onClick={() => handleProfileSelect(profile)}
                        >
                          <div>
                            <div className="text-white font-medium">{profile.name}</div>
                            {profile.promocode && (
                              <div className="text-gray-400 text-sm">{profile.promocode}</div>
                            )}
                          </div>
                          <button
                            onClick={(e) => {
                              e.stopPropagation()
                              handleDeleteProfile(profile.id)
                            }}
                            className="text-red-400 hover:text-red-300 p-1"
                            title="Delete profile"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Influencer Name
                  </label>
                  <input
                    type="text"
                    value={profileName}
                    onChange={(e) => setProfileName(e.target.value)}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                    placeholder="Enter influencer name"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    Promo Code
                  </label>
                  <input
                    type="text"
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value)}
                    className="w-full px-4 py-3 bg-gray-700 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-2 focus:ring-purple-500 focus:border-purple-500 transition-colors"
                    placeholder="Enter promo code"
                  />
                </div>
                
                <div className="flex items-end gap-2">
                  <button
                    onClick={handleSaveProfile}
                    className="flex-1 px-4 py-3 bg-purple-600 hover:bg-purple-500 text-white font-semibold rounded-lg transition-colors duration-200 shadow-lg"
                  >
                    {selectedProfile ? 'Update Profile' : 'Save Profile'}
                  </button>
                  {selectedProfile && calculations && (
                    <button
                      onClick={handleSaveDeal}
                      className="px-4 py-3 bg-green-600 hover:bg-green-500 text-white font-semibold rounded-lg transition-colors duration-200 shadow-lg"
                      title="Save current deal to history"
                    >
                      Save Deal
                    </button>
                  )}
                </div>
              </div>
              
              {/* Deal History */}
              {showDealHistory && selectedProfile && dealHistory.length > 0 && (
                <div className="mt-6 border-t border-gray-600 pt-6">
                  <h3 className="text-lg font-semibold text-white mb-4">Deal History</h3>
                  <div className="space-y-3 max-h-60 overflow-y-auto">
                    {dealHistory.slice(0, 10).map((deal) => (
                      <div key={deal.id} className="bg-gray-700 rounded-lg p-4 border border-gray-600">
                        <div className="flex items-center justify-between mb-2">
                          <div className="text-sm text-gray-400">
                            {new Date(deal.timestamp).toLocaleDateString()} at {new Date(deal.timestamp).toLocaleTimeString()}
                          </div>
                          <div className="text-green-400 font-semibold">
                            ${deal.totalPrice.toLocaleString()}
                          </div>
                        </div>
                        <div className="text-sm text-gray-300">
                          {deal.videoCount} videos, {deal.storyCount} stories â€¢ {Object.keys(deal.selectedPlatforms).filter(p => deal.selectedPlatforms[p]).length} platforms
                        </div>
                        <div className="text-xs text-gray-400 mt-1">
                          {deal.totalViews.toLocaleString()} total views â€¢ {deal.isAdvancedMode ? 'Advanced' : 'Simple'} mode
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>

            {/* Custom Weighting Section */}
            <div className="bg-gray-800 border border-gray-700 rounded-xl p-6 shadow-lg">
              <div className="flex items-center mb-6">
                <div className="w-2 h-8 bg-orange-500 rounded-full mr-4"></div>
                <h2 className="text-xl font-bold text-white">
                  Custom Weighting
                </h2>
              </div>
              
              {/* Global Content Type Weights */}
              <div className="mb-8">
                <h3 className="text-lg font-semibold text-white mb-4">Global Content Weights</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <div className="flex justify-between items-center mb-2">
                      <label className="text-sm font-medium text-gray-400">Video Weight</label>
                      <span className="text-orange-400 font-bold">{globalVideoWeight}</span>
                    </div>
                    <input
                      type="range"
                      min="1"
                      max="20"
                      value={globalVideoWeight}
                      onChange={(e) => setGlobalVideoWeight(parseInt(e.target.value))}
                      className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider-orange"
                    />
                  </div>
                  
                  <div>
                    <div className="flex justify-between items-center mb-2">
                      <label className="text-sm font-medium text-gray-400">Story Weight</label>
                      <span className="text-orange-400 font-bold">{globalStoryWeight}</span>
                    </div>
                    <input
                      type="range"
                      min="1"
                      max="10"
                      value={globalStoryWeight}
                      onChange={(e) => setGlobalStoryWeight(parseInt(e.target.value))}
                      className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider-orange"
                    />
                  </div>
                </div>
              </div>
              
              {/* Platform-Specific Weights */}
              <div>
                <h3 className="text-lg font-semibold text-white mb-4">Platform-Specific Weights</h3>
                <div className="space-y-6">
                  {Object.entries(customWeights).map(([platform, weights]) => (
                    <div key={platform} className="bg-gray-700 border border-gray-600 rounded-lg p-4">
                      <div className="flex items-center mb-4">
                        <div className="w-3 h-3 bg-orange-500 rounded-full mr-3"></div>
                        <h4 className="text-white font-semibold capitalize">{platform}</h4>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <div className="flex justify-between items-center mb-2">
                            <label className="text-sm text-gray-400">Video Weight</label>
                            <span className="text-orange-400 font-medium">{weights.video}</span>
                          </div>
                          <input
                            type="range"
                            min="1"
                            max="20"
                            value={weights.video}
                            onChange={(e) => setCustomWeights(prev => ({
                              ...prev,
                              [platform]: { ...prev[platform], video: parseInt(e.target.value) }
                            }))}
                            className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer slider-orange"
                          />
                        </div>
                        
                        {(platform === 'facebook' || platform === 'instagram') && (
                          <div>
                            <div className="flex justify-between items-center mb-2">
                              <label className="text-sm text-gray-400">Story Weight</label>
                              <span className="text-orange-400 font-medium">{weights.story}</span>
                            </div>
                            <input
                              type="range"
                              min="1"
                              max="10"
                              value={weights.story}
                              onChange={(e) => setCustomWeights(prev => ({
                                ...prev,
                                [platform]: { ...prev[platform], story: parseInt(e.target.value) }
                              }))}
                              className="w-full h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer slider-orange"
                            />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="mt-6 flex gap-4">
                <button 
                  onClick={() => {
                    setCustomWeights(DEFAULT_WEIGHTS)
                    setGlobalVideoWeight(6)
                    setGlobalStoryWeight(1)
                  }}
                  className="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-white font-medium rounded-lg transition-colors"
                >
                  Reset to Defaults
                </button>
                <button className="px-4 py-2 bg-orange-600 hover:bg-orange-500 text-white font-medium rounded-lg transition-colors">
                  Save Custom Weights
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default App
